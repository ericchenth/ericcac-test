#!/usr/bin/env python
# encoding: utf-8
"""
utils.py

Created by Thomas Mangin on 2009-09-06.
Copyright (c) 2009 Exa Networks. All rights reserved.
"""

import os
import sys
import time
import logging
import logging.handlers

class _Logger (object):
	_syslog = os.environ.get('SYSLOG',None)
	_all = False if os.environ.get('DEBUG_ALL','0') == '0' else True
	_instance = None
	_supervisor = True if os.environ.get('DEBUG_SUPERVISOR','1') in ['1','yes','Yes','YES'] else False
	_configuration = False if os.environ.get('DEBUG_CONFIGURATION','0') == '0' else True
	_wire = False if os.environ.get('DEBUG_WIRE','0') == '0' else True
	_message = True if os.environ.get('DEBUG_MESSAGE','1') in ['1','yes','Yes','YES'] else False
	_rib = False if os.environ.get('DEBUG_RIB','0') == '0' else True
	_timers = False if os.environ.get('DEBUG_TIMER','0') == '0' else True

	syslog = None

	# we use os.pid everytime as we may fork and the class is instance before it

	def _prefixed (self,level,source,message):
		now = time.strftime('%a, %d %b %Y %H:%M:%S',time.localtime())
		return "%s %-8s %-6d %-13s %s" % (now,level,os.getpid(),source,message)

	def __init__ (self):
		if self._syslog is None:
			return
		try:
			if self._syslog == '':
				if sys.platform == "darwin":
					address = '/var/run/syslog'
				else:
					address = '/dev/log'
				if not os.path.exists(address):
					address = ('localhost', 514)
				handler = logging.handlers.SysLogHandler(address)
			elif self._syslog.lower().startswith('host:'):
				# If the address is invalid, each syslog call will print an error.
				# See how it can be avoided, as the socket error is encapsulated and not returned
				address = (self._syslog[5:].strip(), 514)
				handler = logging.handlers.SysLogHandler(address)
			else:
				handler = logging.handlers.RotatingFileHandler(self._syslog, maxBytes=5*1024*1024, backupCount=5)
			self.syslog = logging.getLogger()
			self.syslog.setLevel(logging.DEBUG)
			self.syslog.addHandler(handler)
		except IOError,e :
			self.critical('Can not use SYSLOG, failing back to stdout')

	def debug (self,message,source='',level='DEBUG'):
		if self.syslog:
			self.syslog.debug(self._prefixed(level,source,message))
		else:
			print self._prefixed(level,source,message)

	def info (self,message,source='',level='INFO'):
		if self.syslog:
			self.syslog.info(self._prefixed(level,source,message))
		else:
			print self._prefixed(level,source,message)

	def warning (self,message,source='',level='WARNING'):
		if self.syslog:
			self.syslog.warning(self._prefixed(level,source,message))
		else:
			print self._prefixed(level,source,message)

	def error (self,message,source='',level='ERROR'):
		if self.syslog:
			self.syslog.error(self._prefixed(level,source,message))
		else:
			print self._prefixed(level,source,message)

	def critical (self,message,source='',level='CRITICAL'):
		if self.syslog:
			self.syslog.critical(self._prefixed(level,source,message))
		else:
			print self._prefixed(level,source,message)

	# show the message on the wire 
	def wire (self,message):
		if self._wire or self._all:
			self.debug(message,'wire')

	# show the exchange of message between peers
	def message (self,message):
		if self._message or self._all:
			self.info(message,'message')
	
	# show the parsing of the configuration
	def configuration (self,message):
		if self._configuration or self._all:
			self.info(message,'configuration')

	# show the exchange of message generated by the supervisor (^C and signal received)
	def supervisor (self,message):
		if self._supervisor or self._all:
			self.info(message,'supervisor')

	# show the change of rib table
	def rib (self,message):
		if self._rib or self._all:
			self.info(message,'rib')

	# show the change of rib table
	def timers (self,message):
		if self._timers or self._all:
			self.info(message,'timers')


def Logger ():
	if _Logger._instance:
		return _Logger._instance
	instance = _Logger()
	_Logger._instance = instance
	return instance

if __name__ == '__main__':
	logger = Logger()
	logger.wire('wire packet content')
	logger.message('message exchanged')
	logger.debug('debug test')
	
